{"openapi":"3.0.1","info":{"title":"Public Web Service","description":"Web service that allows retrieval of online traffic data.<br> <h3>Usage</h3> <p>The endpoints return streams of live data. When consuming a stream, the client is expected to handle unexpected closing of the stream due to i.e. network issues. During such an interruption, some data may be lost.</p> <p>It is recommended for client applications to accept the media type \"application/x-ndjson\", as it is the most semantically correct one. \"application/stream+json\" is only included for viewing the API in a browser. Note that the content returned by the endpoints will not be valid Json, but rather newline-delimited Json objects.</p> <p>Since there may be a lot of time between data points, the service will periodically send heartbeat-messages.</p> <h3>Example (Java)</h3> <pre> <code> WebClient webClient = WebClient.create(\"https://vdp.zh.ch/pws/public-service\");<br> webClient.get()<br> .uri(\"/readOnlineVbvData/M0692?sampleOnly=false\")<br> .headers(h -> h.add(\"accept\", \"application/x-ndjson\"))<br> .retrieve()<br> .bodyToFlux(String.class)<br> .retryWhen(Retry.backoff(Long.MAX_VALUE, Duration.ofSeconds(2)).jitter(0.75).doBeforeRetry(r -> LOG.info(\"lost connection - retrying...\")))<br> .subscribe(this::doStuff); </code> </pre> <h3>Example (cURL)</h3> <pre> <code> curl -v -i -X GET \"https://vdp.zh.ch/pws/public-service/readOnlineVbvData/M0118?sampleOnly=false\" -H  \"accept: application/x-ndjson\" --output test.txt --retry 5 --retry-connrefused </code> </pre> <p>Note that not every version of cURL supports above command.</p> <h3>Information Streaming</h3> <p>This GUI is not able to handle streaming correctly. Streaming can only be used by accessing API via cURL or any other client implementation. To try out the streaming API only one result will be returned. Gathering the result for VbV-Data will return one sample entry after 15 seconds. If you like to gather sample results for VPD Aggregation data it will take 360 seconds due to the fact that those aggregates are only built every 5 minutes.</p> ","contact":{"name":"Baudirektion Kanton ZÃ¼rich, Tiefbauamt","email":"kurt.amstad@bd.zh.ch"},"license":{"name":"No public licensed"},"version":"1.1.4"},"servers":[{"url":"https://vdp.zh.ch/pws"}],"tags":[{"name":"Collector state","description":"Current MIV collector state."},{"name":"Online Data","description":"Ongoing and calculated vehicle data and aggregations."},{"name":"Collector configuration","description":"Current MIV collector configuration."}],"paths":{"/public-service/readOnlineVbvData/{collectorid}":{"get":{"tags":["Online Data"],"description":"Reads the ongoing online vbv data.","operationId":"readOnlineVbvData","parameters":[{"name":"collectorid","in":"path","description":"Collector ID.\n\n A list of all collectors can be found <a href=\"https://maps.zh.ch/?topic=TBAVMSZH&offlayers=bezirkslabels\" target=\"_blank\">here</a> (prefix with M compared to the IDs from the link, e.g. use M0197 instead of 0197).","required":true,"schema":{"type":"string"},"example":"M0197"},{"name":"sampleOnly","in":"query","description":"Return only one sample. \n\n The maximum waiting time until the first sample currently is 15 seconds.","required":true,"schema":{"type":"boolean"},"example":true}],"responses":{"403":{"description":"Collector not allowed","content":{"application/json":{}}},"504":{"description":"Token for authentication could not be received","content":{"application/json":{}}},"404":{"description":"Collector not found","content":{"application/json":{}}},"200":{"description":"Successful operation","content":{"application/stream+json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/VbvData"},{"$ref":"#/components/schemas/Heartbeat"}]}},"application/x-ndjson":{"schema":{"oneOf":[{"$ref":"#/components/schemas/VbvData"},{"$ref":"#/components/schemas/Heartbeat"}]}},"text/event-stream":{"schema":{"oneOf":[{"$ref":"#/components/schemas/VbvData"},{"$ref":"#/components/schemas/Heartbeat"}]}}}}}}},"/public-service/readOnlineAggregationData/{aggregationtype}/{collectorid}":{"get":{"tags":["Online Data"],"description":"Reads the ongoing calculated aggregation data.","operationId":"readOnlineAggregationData","parameters":[{"name":"aggregationtype","in":"path","description":"Aggregation type, relevant for received aggregation format. VDP stands for \"Verkehrsdatenplattform\".","required":true,"schema":{"type":"string","description":"Specifies the different aggregation format types.","enum":["VDP"]},"example":"VDP"},{"name":"collectorid","in":"path","description":"Collector ID.\n\n A list of all collectors can be found <a href=\"https://maps.zh.ch/?topic=TBAVMSZH&offlayers=bezirkslabels\" target=\"_blank\">here</a> (prefix with M compared to the IDs from the link, e.g. use M0197 instead of 0197).","required":true,"schema":{"type":"string"},"example":"M0197"},{"name":"sampleOnly","in":"query","description":"Return only one sample. \n\n The maximum waiting time until the first sample currently is 360 seconds.","required":true,"schema":{"type":"boolean"},"example":true}],"responses":{"403":{"description":"Collector not allowed","content":{"application/json":{}}},"504":{"description":"Token for authentication could not be received","content":{"application/json":{}}},"404":{"description":"Collector not found","content":{"application/json":{}}},"200":{"description":"Successful operation","content":{"application/stream+json":{"schema":{"oneOf":[{"$ref":"#/components/schemas/AggVdp"},{"$ref":"#/components/schemas/Heartbeat"}]}},"application/x-ndjson":{"schema":{"oneOf":[{"$ref":"#/components/schemas/AggVdp"},{"$ref":"#/components/schemas/Heartbeat"}]}},"text/event-stream":{"schema":{"oneOf":[{"$ref":"#/components/schemas/AggVdp"},{"$ref":"#/components/schemas/Heartbeat"}]}}}},"422":{"description":"Invalid aggregation type","content":{"application/json":{}}}}}},"/public-service/readCollectorsCfg":{"get":{"tags":["Collector configuration"],"description":"Reads the current collector configuration for MIV type.","operationId":"readCollectorsCfg","responses":{"504":{"description":"Token for authentication could not be received","content":{"application/json":{}}},"200":{"description":"Successful operation","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CollectorCfg"}}}}}}}},"/public-service/readCollectorState/{collectorid}":{"get":{"tags":["Collector state"],"description":"Reads the current collector state for collectorId.","operationId":"readCollectorState","parameters":[{"name":"collectorid","in":"path","description":"Collector ID.\n\n A list of all collectors can be found <a href=\"https://maps.zh.ch/?topic=TBAVMSZH&offlayers=bezirkslabels\" target=\"_blank\">here</a> (prefix with M compared to the IDs from the link, e.g. use M0197 instead of 0197).","required":true,"schema":{"type":"string"},"example":"M0197"}],"responses":{"404":{"description":"No state found for given id","content":{"application/json":{}}},"504":{"description":"Token for authentication could not be received","content":{"application/json":{}}},"200":{"description":"Successful operation","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CollectorState"}}}}}}}}},"components":{"schemas":{"UniqueId":{"required":["id"],"type":"object","properties":{"id":{"type":"string","description":"Root id, e.g. collectors id","example":"L184"},"sub":{"$ref":"#/components/schemas/UniqueId"}},"description":"Recursive id of object.","example":{"id":"L184","sub":{"id":"11.11G"}}},"VbvData":{"type":"object","properties":{"effectiveTime":{"type":"string","description":"Timestamp when data was persisted .Time in [ms] since unix epoche.","example":"1602743932161"},"protType":{"type":"string","description":"Protocol type used to transfer this vehicle detection data.","example":"GRPS"},"seqnum":{"type":"integer","description":"Sequence number of vehicle detection.","format":"int32","example":38846},"classType":{"type":"string","description":"Vehicle class type of vehicle detected. Can be one of the following values \n            <ul><li>VAL: Value</li>\n            <li>NAV: Not a value</li>\n            <li>LT: Exclusive upper bound</li>\n            <li>LTE: Inclusive upper bound</li>\n            <li>GT: Exclusive lower bound</li>\n            <li>GTE: Inclusive lower bound</li>\n            <li>NVA: No value available</li></ul>","example":"VAL"},"occupancy":{"type":"integer","description":"Occupancy of detection unit during the vehicle detection in [ms]. (obsolete)","format":"int32","example":238},"headway":{"type":"integer","description":"Headway with respect to previous vehicle detection in [ms].","format":"int32","example":16},"gap":{"type":"integer","description":"Gap with respect to previous vehicle detection in [ms].","format":"int32","example":13},"length":{"type":"integer","description":"Length of the vehicle detected in [10^-2 m].","format":"int32","example":621},"swiss10Class":{"type":"string","description":"Swiss10 class of vehicle detected. Can be one of the following values \n            <ul><li>SWISS10_BUS: Bus</li>\n            <li>SWISS10_MR: Motorcycle</li>\n            <li>SWISS10_PW: Passenger car</li>\n            <li>SWISS10_PWA: Passenger car with trailer</li>\n            <li>SWISS10_LFW: Delivery van</li>\n            <li>SWISS10_LFWA: Delivery van with trailer</li>\n            <li>SWISS10_LFWAL: Delivery van with semitrailer</li>\n            <li>SWISS10_LKW: Truck</li>\n            <li>SWISS10_LZ: Lorry train </li>\n            <li>SWISS10_SZ: Semitrailer</li></ul>","example":"SWISS10_PW"},"seqnumType":{"type":"string","description":"Sequence number type of vehicle detection. Can be one of the following values \n            <ul><li>VAL: Value</li>\n            <li>NAV: Not a value</li>\n            <li>LT: Exclusive upper bound</li>\n            <li>LTE: Inclusive upper bound</li>\n            <li>GT: Exclusive lower bound</li>\n            <li>GTE: Inclusive lower bound</li>\n            <li>NVA: No value available</li></ul>","example":"VAL"},"status":{"type":"integer","description":"Status of vehicle detection. Bit field that can have the following values \n            <ul><li>0: Ok</li>\n            <li>1: Invalid vehicle</li>\n            <li>8: Vehicle length less than the minimum</li>\n            <li>10: Lane has only one working loop</li>\n            <li>12: Straddling vehicle</li></ul>","format":"int32","example":0},"direction":{"type":"string","description":"Driving direction  of vehicle detected.  \nCan be \"POSITIVE\" or \"NEGATIVE\" in relation to the expected driving direction (e.g. If the vehicle overtakes at the collecting point, it is on the opposite lane. Therefore a \"NEGATIVE\" direction is recorded).","example":"POSITIVE"},"occupancyType":{"type":"string","description":"Occupancy type of detection unit during the vehicle detection. Can be one of the following values \n            <ul><li>VAL: Value</li>\n            <li>NAV: Not a value</li>\n            <li>LT: Exclusive upper bound</li>\n            <li>LTE: Inclusive upper bound</li>\n            <li>GT: Exclusive lower bound</li>\n            <li>GTE: Inclusive lower bound</li>\n            <li>NVA: No value available</li></ul>","example":"NVA"},"headwayType":{"type":"string","description":"Headway type with respect to previous vehicle detection.","example":"0"},"gapType":{"type":"string","description":"Gap type with respect to previous vehicle detection. Can be one of the following values \n            <ul><li>VAL: Value</li>\n            <li>NAV: Not a value</li>\n            <li>LT: Exclusive upper bound</li>\n            <li>LTE: Inclusive upper bound</li>\n            <li>GT: Exclusive lower bound</li>\n            <li>GTE: Inclusive lower bound</li>\n            <li>NVA: No value available</li></ul>","example":"VAL"},"lengthType":{"type":"string","description":"Length type of the vehicle detected. Can be one of the following values \n            <ul><li>VAL: Value</li>\n            <li>NAV: Not a value</li>\n            <li>LT: Exclusive upper bound</li>\n            <li>LTE: Inclusive upper bound</li>\n            <li>GT: Exclusive lower bound</li>\n            <li>GTE: Inclusive lower bound</li>\n            <li>NVA: No value available</li></ul>","example":"VAL"},"statusType":{"type":"string","description":"Status type of vehicle detection. Can be one of the following values \n            <ul><li>VAL: Value</li>\n            <li>NAV: Not a value</li>\n            <li>LT: Exclusive upper bound</li>\n            <li>LTE: Inclusive upper bound</li>\n            <li>GT: Exclusive lower bound</li>\n            <li>GTE: Inclusive lower bound</li>\n            <li>NVA: No value available</li></ul>","example":"VAL"},"directionType":{"type":"string","description":"Driving direction type of vehicle detected. Can be one of the following values \n            <ul><li>VAL: Value</li>\n            <li>NAV: Not a value</li>\n            <li>LT: Exclusive upper bound</li>\n            <li>LTE: Inclusive upper bound</li>\n            <li>GT: Exclusive lower bound</li>\n            <li>GTE: Inclusive lower bound</li>\n            <li>NVA: No value available</li></ul>","example":"VAL"},"subMsDiscriminator":{"type":"string","description":"Value allowing a sub-ms destinction maintaining the order in time.","example":"0"},"clockID":{"type":"integer","description":"Identifier of the clock used to determine effectiveTime.","format":"int32","example":1},"rcvTime":{"type":"string","description":"The time when the external vehicle data message was received by protocol adapter. Time in [ms] since unix epoche.","example":"1602743932160"},"srcTime":{"type":"string","description":"The time that has been reported together with this vehicle data by tdCollector. Time in [ms] since unix epoche.","example":"1602743932159"},"srcTimeUtcOffset":{"type":"integer","description":"The timeOffset (including potential dst-offset) assumed to have been used by tdCollector when reporting srcTime. TimeOffset in [ms] with respect to UTC.","format":"int32","example":0},"uID":{"$ref":"#/components/schemas/UniqueId"}},"description":"Vehicle data received from protocol adapters."},"Heartbeat":{"type":"object","properties":{"alive":{"type":"integer","format":"int32","example":1}},"description":"Heartbeat message.","example":{"alive":1}},"AggVdp":{"type":"object","properties":{"uniqueId":{"$ref":"#/components/schemas/UniqueId"},"intBegin":{"type":"integer","description":"Begin of calculation. Time in [ms] since unix epoche.","format":"int64","example":1602579300000},"intDuration":{"type":"integer","description":"Duration of calculation in [ms]","format":"int32","example":300},"statistics":{"type":"array","description":"Calculated statistic details","items":{"$ref":"#/components/schemas/AggVdpDetail"}}},"description":"Aggregations calculated from vehicle data in vdp format."},"AggVdpDetail":{"type":"object","properties":{"aggClass":{"type":"string","description":"Aggregation class. Can be one of the following values\n<ul><li>AGG2CLASS_BUS: Bus</li>\n<li>AGG2CLASS_MR: Motorcycle</li>\n<li>AGG2CLASS_PW: Passenger car</li>\n<li>AGG2CLASS_PWA: Passenger car with trailer</li>\n<li>AGG2CLASS_LFW: Delivery van</li>\n<li>AGG2CLASS_LFWA: Delivery van with trailer</li>\n<li>AGG2CLASS_LFWAL: Delivery van with semitrailer</li>\n<li>AGG2CLASS_LKW: Truck</li>\n<li>AGG2CLASS_LZ: Lorry train</li>\n<li>AGG2CLASS_SZ: Semitrailer</li>\n<li>AGG2CLASS_ALL: All classes</li>\n<li>AGG2CLASS_UNDEFINED: Undefined classes</li>\n<li>AGG2CLASS_HEAVY: Heavy vehicles</li>\n<li>AGG2CLASS_NOISY: Noisy vehicles</li></ul>\n"},"flow":{"type":"integer","description":"Number of vehicles per hour.","format":"int32","example":60},"count":{"type":"integer","description":"Number of vehicles having speed information.","format":"int32","example":5},"countAll":{"type":"integer","description":"Number of vehicles. Vehicles are counted regardless of whether speed information is available or not.","format":"int32"},"avg":{"type":"number","description":"Average speed in km/h. Calculated only based on vehicles having speed information.","format":"float","example":40.1},"sDeviation":{"type":"number","description":"Standard deviation of average speed.","format":"float","example":1.1},"q15":{"type":"number","description":"15 percent quantile of speed.","format":"float","example":50.3},"q50":{"type":"number","description":"50 percent quantile of speed.","format":"float","example":55.0},"q85":{"type":"number","description":"85 percent quantile of speed.","format":"float","example":57.1}},"description":"Calculated details in Vdp format."},"CollectorCfg":{"type":"object","properties":{"uID":{"$ref":"#/components/schemas/UniqueID"},"name":{"type":"string","description":"The name of the collector.","example":"BÃ¼lach: ZÃ¼rich-/Schleufenbergstr."},"collectorStatus":{"type":"string","description":"The status of the collector.","example":"ACTIVE"},"detectors":{"type":"array","items":{"$ref":"#/components/schemas/DetectorCfg"}},"uid":{"$ref":"#/components/schemas/UniqueID"}},"description":"Collector configuration."},"DetectorCfg":{"type":"object","properties":{"uID":{"$ref":"#/components/schemas/UniqueID"},"name":{"type":"string","description":"The name of the detector.","example":"Normalspur Richtung ZÃ¼rich"},"uid":{"$ref":"#/components/schemas/UniqueID"}},"description":"Detector configuration."},"UniqueID":{"required":["id"],"type":"object","properties":{"id":{"pattern":"^[^#/]+$","type":"string"},"sub":{"$ref":"#/components/schemas/UniqueID"}}},"CollectorState":{"type":"object","properties":{"uID":{"$ref":"#/components/schemas/UniqueID"},"statusTime":{"type":"number","description":"The name of the collector.","format":"double"},"status":{"type":"string","description":"The status of the collector.","example":"ACTIVE","enum":["OK","FAILURE","OFFLINE","INACTIVE","IMPORTED"]},"uid":{"$ref":"#/components/schemas/UniqueID"}},"description":"Collector state."}}}}